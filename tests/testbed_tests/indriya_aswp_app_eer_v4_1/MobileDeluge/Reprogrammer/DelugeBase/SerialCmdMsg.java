/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'SerialCmdMsg'
 * message type.
 */

public class SerialCmdMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 33;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 136;

    /** Create a new SerialCmdMsg of size 33. */
    public SerialCmdMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new SerialCmdMsg of the given data_length. */
    public SerialCmdMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialCmdMsg with the given data_length
     * and base offset.
     */
    public SerialCmdMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialCmdMsg using the given byte array
     * as backing store.
     */
    public SerialCmdMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialCmdMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public SerialCmdMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialCmdMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public SerialCmdMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialCmdMsg embedded in the given message
     * at the given base offset.
     */
    public SerialCmdMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialCmdMsg embedded in the given message
     * at the given base offset and length.
     */
    public SerialCmdMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <SerialCmdMsg> \n";
      try {
        s += "  [cmd=0x"+Long.toHexString(get_cmd())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nodeCount=0x"+Long.toHexString(get_nodeCount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nodeList=";
        for (int i = 0; i < 15; i++) {
          s += "0x"+Long.toHexString(getElement_nodeList(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [newChannel=0x"+Long.toHexString(get_newChannel())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: cmd
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'cmd' is signed (false).
     */
    public static boolean isSigned_cmd() {
        return false;
    }

    /**
     * Return whether the field 'cmd' is an array (false).
     */
    public static boolean isArray_cmd() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'cmd'
     */
    public static int offset_cmd() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'cmd'
     */
    public static int offsetBits_cmd() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'cmd'
     */
    public short get_cmd() {
        return (short)getUIntBEElement(offsetBits_cmd(), 8);
    }

    /**
     * Set the value of the field 'cmd'
     */
    public void set_cmd(short value) {
        setUIntBEElement(offsetBits_cmd(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'cmd'
     */
    public static int size_cmd() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'cmd'
     */
    public static int sizeBits_cmd() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeCount
    //   Field type: short, unsigned
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeCount' is signed (false).
     */
    public static boolean isSigned_nodeCount() {
        return false;
    }

    /**
     * Return whether the field 'nodeCount' is an array (false).
     */
    public static boolean isArray_nodeCount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeCount'
     */
    public static int offset_nodeCount() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeCount'
     */
    public static int offsetBits_nodeCount() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'nodeCount'
     */
    public short get_nodeCount() {
        return (short)getUIntBEElement(offsetBits_nodeCount(), 8);
    }

    /**
     * Set the value of the field 'nodeCount'
     */
    public void set_nodeCount(short value) {
        setUIntBEElement(offsetBits_nodeCount(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeCount'
     */
    public static int size_nodeCount() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeCount'
     */
    public static int sizeBits_nodeCount() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeList
    //   Field type: int[], unsigned
    //   Offset (bits): 16
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeList' is signed (false).
     */
    public static boolean isSigned_nodeList() {
        return false;
    }

    /**
     * Return whether the field 'nodeList' is an array (true).
     */
    public static boolean isArray_nodeList() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeList'
     */
    public static int offset_nodeList(int index1) {
        int offset = 16;
        if (index1 < 0 || index1 >= 15) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeList'
     */
    public static int offsetBits_nodeList(int index1) {
        int offset = 16;
        if (index1 < 0 || index1 >= 15) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'nodeList' as a int[]
     */
    public int[] get_nodeList() {
        int[] tmp = new int[15];
        for (int index0 = 0; index0 < numElements_nodeList(0); index0++) {
            tmp[index0] = getElement_nodeList(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'nodeList' from the given int[]
     */
    public void set_nodeList(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_nodeList(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'nodeList'
     */
    public int getElement_nodeList(int index1) {
        return (int)getUIntBEElement(offsetBits_nodeList(index1), 16);
    }

    /**
     * Set an element of the array 'nodeList'
     */
    public void setElement_nodeList(int index1, int value) {
        setUIntBEElement(offsetBits_nodeList(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'nodeList'
     */
    public static int totalSize_nodeList() {
        return (240 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'nodeList'
     */
    public static int totalSizeBits_nodeList() {
        return 240;
    }

    /**
     * Return the size, in bytes, of each element of the array 'nodeList'
     */
    public static int elementSize_nodeList() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'nodeList'
     */
    public static int elementSizeBits_nodeList() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'nodeList'
     */
    public static int numDimensions_nodeList() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'nodeList'
     */
    public static int numElements_nodeList() {
        return 15;
    }

    /**
     * Return the number of elements in the array 'nodeList'
     * for the given dimension.
     */
    public static int numElements_nodeList(int dimension) {
      int array_dims[] = { 15,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: newChannel
    //   Field type: short, unsigned
    //   Offset (bits): 256
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'newChannel' is signed (false).
     */
    public static boolean isSigned_newChannel() {
        return false;
    }

    /**
     * Return whether the field 'newChannel' is an array (false).
     */
    public static boolean isArray_newChannel() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'newChannel'
     */
    public static int offset_newChannel() {
        return (256 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'newChannel'
     */
    public static int offsetBits_newChannel() {
        return 256;
    }

    /**
     * Return the value (as a short) of the field 'newChannel'
     */
    public short get_newChannel() {
        return (short)getUIntBEElement(offsetBits_newChannel(), 8);
    }

    /**
     * Set the value of the field 'newChannel'
     */
    public void set_newChannel(short value) {
        setUIntBEElement(offsetBits_newChannel(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'newChannel'
     */
    public static int size_newChannel() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'newChannel'
     */
    public static int sizeBits_newChannel() {
        return 8;
    }

}
